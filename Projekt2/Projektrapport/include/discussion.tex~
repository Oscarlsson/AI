\chapter{Diskussion}
Här diskuterar vi problem som uppstått och val vi gjort som har påverkat projektets resultat. Diskussionen kring jämförelsen finns utförlig i kapitel 2.5, med en kort sammanfattning nedan. De delar vi diskuterar är modellering, implementering och vår arbetsgång. Kapitlet avslutas med tankar om hur vårt arbete kan utmynna i ett nytt kandidatarbete och vidareutvecklas. 
\section{Jämförelsen av språk}
Efter att vi hade påbörjat språkjämförelsen framkom det att det från kunden fanns outalade restriktoner angående vilket programmeringsspråk internsystemet kunde implementeras i. Om dessa varit kända från början hade vi kunnat begränsa utvärderingen till ramverk för de möjliga språken.
Ruby on Rails, Django och JSP är inte möjliga att implementera i, varför istället mer utförliga utvärderingar borde ha gjorts av ramverk till PHP, då de var tänkbara för implementering. Under utvärderingen fick vi däremot bred kunskap inom olika sorters webbutveckling samt inblick i fördelar och nackdelar med olika språk. Utvärderingen var alltså lärorik och kunskapen användbar vid implementeringen.
\section{Hur gick modelleringen?}
Under modelleringsprocessen ändrades modellen av vårt system flera gånger, allt eftersom vi inhämtade ny kunskap. Det hade givetvis varit en stor fördel och även sparat tid om gruppen hade haft kunskap om databaser och modelleringsspråk vid projektets start. Däremot har vi fått möjligheten att studera helt nya områden. Mycket av materialet vi använt i modelleringsstadiet kommer från en databaskurs på Chalmers och kan med all säkerhet användas framgångsrikt i framtida arbeten.\\\\
När väl implementeringen påbörjades lärde vi oss nya fördelar med CodeIgniter, vilket gjorde att resultatet skiljer sig från vår ursprungliga modelleringsidé. De modeller som omnämns i kapitel 4 bör därför ses som en utgångspunkt för systemet och det som lagt grund till den slutgiltiga modelleringen samt det implementerade resultatet.  \\\\
Att resultatet och modelleringen skiljer sig ser vi som en naturlig del av projektet. Modelleringen var lika mycket till för att underlätta vid implementering som för att förstå problemet och se svårigheter. Somliga klasser i modelleringen resulterade i databastabeller och istället för två databaser implementerades systemet med en. Framtida arbeten kan utnyttja både vårt resultat och våra modeller för att komplettera internsystemet.
\section{Hur gick implementeringen?}
Stora delar av implementeringen tog längre tid än väntat. Vi hade inte förstått hur omfattande den var,  och förutsåg inte de svårigheter som uppkom. Detta tillsammans med att det tog längre tid än planerat att sätta sig in i programmeringsspråket med tillhörande ramverk, innebar att endast de mest grundläggande delarna av systemet hann implementeras. Konsekvensen av det här blev att krav $\#$6 inte hann implementeras.\\\\
För att exekvera den implementerade koden installerade varje gruppmedlem varsin lokal webbserver på sin dator. Vi antog att institutionen skulle tillhandahålla en gemensam webbserver, men så var inte fallet. Tid som avsatts till implementering fick istället gå till att konfigurera en egen server, vilket inte var något vi tagit hänsyn till i första tidsplaneringen. Däremot fick vi kunskap om servrar och deras mjukvarukonfiguration, vilket bidrog till bättre förståelse av webbutveckling.  \\\\
Vid utvärderingen av ramverk insåg vi inte fördelarna med funktionen Scaffolding, som autogenererar kod. Vi uppfattade det som något för mer inbitna programmerare och att det snarare skulle förvirra oss i vår egen kod. Efter att ha kommit igång med programmeringen kunde vi se en upprepning av kod för olika klasser, där autogenerering hade varit smidigt och sparat tid för projektet -- vilket är något vi borde ha vägt in i valet av ramverk. Å andra sidan var det väldigt lärorikt att få skriva mer kod själva och det är först efter implementeringen vi ser fördelarna med Scaffolding. \\\\
Valet att använda MVC-modellen vid implementering var nästintill självklar på grund av dess stora spridning inom webbutveckling. Det har tagit tid att vänja sig vid uppdelning av kod och det tankesätt som krävs, men i efterhand har modellen visat sig ha förvånansvärt många fördelar. En aspekt som underlättades särskilt mycket var felsökning.\\\\
Objektorienterad webbutveckling i PHP är nytt, och det finns spridda åsikter om hur det skall tillämpas. Det har varit svårt att hitta en metod för implementeringen som definerar hur klasser skall användas och vad som särskiljer komponenter i MVC-modellen. Detta är något som hade undvikits genom att använda Ruby on Rails, som har stöd för objektorientering sedan sin lansering. \\\\\\\\
Eftersom vi saknade kunskap om CodeIgniters alla fördelar, är delar av implementeringen onödigt komplicerade. I efterhand känns det som att vi har fastnat i nybörjarfel, vilket är naturligt vid första projektet i ett nytt programmeringsspråk, men vi har lärt oss av våra misstag och utvecklats under projektet. I slutfasen av implementeringen kunde vi dock börja optimera vår kod, och i större grad utnyttja CodeIgniters funktioner. 
\section{Hur väl har arbetsgången fungerat?}
De möten som hafts varje vecka, både med handledare och inom gruppen, har varit ett bra sätt att följa upp de mål som kontinuerligt satts och gemensamt kunna lösa problem som uppstått under projektet.\\\\
När årets CHARM-mässa inföll utnyttjade vi tiden till att studera hur CHARMk organiserar och arbetar under en mässa, samt vilka delar av det dåvarande systemet som faktiskt användes. Däremot innebar mässan att CHARMk till och från var otillgängliga och flera av de planerade möten uteblev. \\\\
Beskrivningen av kandidatarbetet var otydlig och trots att CHARMk hade åsikter om projektet framgick det inte tydligt ur vår kommunikation. Bättre kommunikation med CHARMk hade exempelvis kunnat underlätta vid valet av programmeringsspråk.\\\\
I slutet av projektet klargjorde CHARMk att ett komplett internsystem behöver vara implementerat till sommaren. Detta på grund av att det utgående system är ohållbart och att licensen inte skulle förnyas. Vi poängterade att detta var något vi inte kunde uppfylla, vilket gjorde att kraven på projektet minskade och vi inte längre behöver leverera en produkt. Däremot är CHARMk intresserade av det resultat och de slutsatser vårt arbete har givit.\\\\
Något som definitivt kunde förbättrats under projektets gång var rapportskrivandet; om rapporten hade skrivits mer löpande hade arbetsbelastningen i slutet av projektet inte varit lika oproportionerligt hög. Tidsplaneringen borde gjorts mer realistisk genom att räkna in förberedelser inför redovisningar och handledningstillfällen. Projektet och rapportsskrivandet har trots detta fungerat bra och känts mycket givande. 
\section{Lärdomar och framtida arbeten}
Vi har fått erfarenhet av hur det är att arbeta mot en uppdragsgivare och fått översätta idéer och krav till tekniska lösningar. Projektet har medvetet utformats för att efterlikna ett modernt webbprojekt i industrin. Nästan all utveckling mot webben sker idag med hjälp av ramverk och den erfarenheten vi har fått från CodeIgniter kan överföras till andra ramverk. Under projektet har vi fått läras oss om serverkonfiguration mot en Linuxdistribution. \\\\ 
De lärdomar vi har dragit från att använda GitHub som versionshanterare är inte bara användbara vid webbutveckling. GitHub används vid många programmeringsprojekt, såväl i industrin som vid hobbyprojekt.\\\\
Projektet har lagt grund för CHARMks nya internsystem. En möjlighet är att ett nytt kandidatarbete kan utnyttja det vi påbörjat för att slutföra produkten. Det skulle innebära en vidareutveckling av det system som vi påbörjat, och kunna så småningom resultera i ett komplett internsystem. 
