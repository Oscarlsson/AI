\chapter{Implementering}
Nedan följer beskrivningar av den utvecklingsmiljö och de metoder som har använts vid implementeringen. Kapitlet beskriver också hur de olika delarna i systemet är implementerade samt de säkerhetsaspekter som det tagits särskild hänsyn till.
\section{Utvecklingsmiljö}
Med hänvisning till slutsatsen i kapitel 2.5 valdes följande utvecklingsmiljö. All versionshantering för kod har skett genom GitHub.\\\\
\begin{tabular}{ | l | r | }
\hline
\textbf{Programmeringsspråk} & PHP \\ \hline
\textbf{Ramverk} & CodeIgniter \\ \hline
\textbf{Databashanterare} & MySQL \\ \hline
\end{tabular}
\subsection{Serverkonfiguration}
För att kunna exekvera koden krävdes en webbserver. Det konfiguerades en server som efterliknade CHARMks server enligt tabellen nedan. \\\\
\begin{tabular}{ | l | r | }
  \hline
  \textbf{Distribution:} & Ubuntu Server 11.10 \\ \hline
  \textbf{Webbserver:} & Apache2 + phpMyAdmin \\ \hline
  \textbf{Databashanterare:} & MySQL \\ \hline
  \textbf{FTP-server:} & VsFTPd \\ \hline
  \textbf{Mail-server:} & PostFix \\ \hline
  \textbf{Övrigt:} & OpenSSH-server \\ \hline
\end{tabular}

\section{MVC-modellen}
Strukturen på internsystemet följer MVC-modellen som är en arkitekturmodell, vilken används för att separera programlogik från presentation i ett mjukvarusystem. MVC står för Model-View-Controller och representerar systemets uppdelning. Model är själva datan och den delen som kommunicerar med databasen. View är användargränssnittet. Länken mellan View och Model är Controller \citep{mvc}. Detta illustreras i Figur~\ref{fig:mvc}\footnote{Figuren är hämtad från: http://en.wikipedia.org/wiki/File:ModelViewControllerDiagram2.svg} där de heldragna linjerna representerar direkta associationer och de streckade indirekta.  
\begin{figure}[htb]
\centering
\includegraphics{fig/implementation/ModelViewControllerDiagram2.pdf}
\caption{\textit{Ett schematiskt diagram över MVC-modellen}}
\label{fig:mvc}
\end{figure}\\
Genom att använda MVC-modellen blir systemet dels lättare att felsöka, och dels lättare för utomstående att sätta sig in i. Delkomponenterna i systemet är först indelade i klasser och dessa i sin tur uppdelade enligt MVC-modellen.\\\\
Figur~\ref{fig:mvc_ci} beskriver hur mappstrukturen ser ut i CodeIgniter. Delarna i MVC-modellen representeras av olika mappar (understrukna i figuren). Denna modell har följts vid implementeringen där de olika filerna läggs i rätt mapp för att MVC-modellen skall fungera.\\
\begin{figure}[htb]
\centering
\includegraphics[scale=0.9]{fig/implementation/MVC_codeigniter.png}
\caption{\textit{Mappstruktur i CodeIgniter}}
\label{fig:mvc_ci}
\end{figure}
\newpage
\section{Inloggningssystem}
Inloggningssystemet behöver vara säkert, samtidigt som det skall vara enkelt för studenter att registrera sig. CHARMk ställde som krav att det skall finnas olika behörighetsnivåer och att både studenter och medlemmarna i CHARMk skall kunna logga in.\\\\
Implementeringen består av två klasser: \textit{Login} och \textit{Registration}. Klassen \textit{Login} har en View-fil innehållande formulär och referens till \textit{Registration}. Nya användare skapas genom ett formulär i klassen \textit{Registration} och användarinformationen lagras i databasen (se Figur~\ref{fig:users}). Användaren får också en behörighetsnivå (AccessID), beroende på om den är en student eller tillhör CHARMk. 
\begin{figure}[htb]
\centering
\includegraphics[scale=0.5]{fig/implementation/database/dbuser.png}
\caption{\textit{Användartabellen i databasen}}
\label{fig:users}
\end{figure}\\
Vid registreringen kontrolleras att den inmatade mailadressen har ändelsen\\ “@student.chalmers.se” eller “@charm.chalmers.se”. Sedan skickar systemet ut ett mail som bekräftar för mailadressens ägare att den har blivit medlem på sidan. Användaren kan direkt efter registreringen logga in med den angivna mailadressen och tillhörande lösenord.\\\\
Till inloggningssystemet finns endast en Model-fil som har hand om all databashantering. 
För lagring i databasen används ramverkets Active Records-funktion. Ramverket garanterar SQL-säkrade söksträngar genom att byta ut specialtecken \citep{ci}.\\\\
Användarnas lösenord lagras som SHA1-hashvärden. De räknas ut med hjälp av ramverkets krypteringsfunktion, vilken är lämplig för lagring av lösenord \citep{ci}.\\\\
För att särskilja behöriga och obehöriga på de säkra sidorna används sessioner. All sessionsdata lagras i krypterat i cookies och lagras även i databasen (se Figur~\ref{fig:session}) för validering \citep{ci}.
\begin{figure}[htb]
\centering
\includegraphics[scale=0.55]{fig/implementation/database/session_tabell.png}
\caption{\textit{Sessionstabellen i databasen}}
\label{fig:session}
\end{figure}
\section{Företagsimport}
Företagen anmäler sig till en mässa via arbetsmarknadsdagar.se, där företagsinformationen finns tillgänglig i form av en CSV-fil. Informationen importeras sedan till internsystemet.\\\\
View-filen representerar ett uppladdningsformulär, som endast accepterar filer av typen CSV. När användaren laddat upp CSV-filen lagras den temporärt på servern innan uppdateringen av databasen sker.\\\\
I en CSV-fil (se Figur~\ref{fig:csv}) representerar varje rad ett företag med dess information, där olika informationdelar separeras med kommatecken. Rubrikera för företagsinformationen representeras av den första raden i filen. Exempel på rubriker är: organisationsnamn, organisationsnummer och telefonnummer.  Med den färdiga hjälpklassen \textit{CSVReader} \citep{csvreader} läses all data in och lagras i en Array-struktur.
\begin{figure}[htb]
\centering
\includegraphics[scale=0.57]{fig/implementation/csv.png}
\caption{\textit{Exempel på en CSV-fil där SID är unikt ID}}
\label{fig:csv}
\end{figure}\\
I Model-filen uppdateras databasen (se Figur~\ref{fig:companies}) med informationen från Array-strukturen. Om ett företag redan finns i databasen kompletteras endast informationen, annars läggs företaget till. Detta för att undvika dupliceringar av företag.
\begin{figure}[htb]
\centering
\includegraphics[scale=0.42]{fig/implementation/database/dbforetag.png}
\caption{\textit{Företagstabellen i databasen}}
\label{fig:companies}
\end{figure}
\section{Ansökningsformulär}
Vid implementeringen av ansökningsformuläret var det viktigt att formuläret blev så flexibelt som möjligt. CHARMk skall enkelt kunna uppdatera formuläret inför varje ny mässa.\\\\
Ansökningsformuläret implementerades därför i ett XML-dokument innehållande alla frågor, samt vilken typ av HTML-formulär som skall vara kopplad till vilken fråga (se Figur~\ref{fig:fraga} och Figur~\ref{fig:kategori}). Formuläret är flexibilet i den mån att frågor samt HTML-formulären defineras i XML-filen, och inte i systemets statiska kod. \\\\\\\\
\begin{figure}[htbp]
  \begin{minipage}[b]{0.45\linewidth}
    \centering
    \includegraphics[width=\linewidth, scale=0.5]{fig/implementation/question.png}
    \caption{\textit{Exempel på en fråga i XML-filen}}
    \label{fig:fraga}
  \end{minipage}
  \hspace{0.5cm}
  \begin{minipage}[b]{0.45\linewidth}
    \centering
    \includegraphics[width=\linewidth, scale=0.5]{fig/implementation/kategori.png}
    \caption{\textit{Exempel på en kategori i XML-filen}}
    \label{fig:kategori}
  \end{minipage}
\end{figure} \\
Systemet översätter endast XML-filen till dess HTML-representation (se Figur~\ref{fig:formular}).
\begin{figure}[htb]
\centering
\includegraphics[scale=0.45]{fig/implementation/system/ansokform.png}
\caption{\textit{Representation av XML-fil}}
\label{fig:formular}
\end{figure}\\
När CHARMk öppnar värdansökan skapas en databastabell (se Figur~\ref{fig:application}) där varje fält representerar en fråga från XML-filen. När värdansökan är öppen kommer studenter att få möjlighet att skicka in ansökningar.
\begin{figure}[htb]
\centering
\includegraphics[scale=0.5]{fig/implementation/database/application.png}
\caption{\textit{Tabell i databasen över alla ansökningssvar}}
\label{fig:application}
\end{figure}\\
När en ansökan har skickats in läggs studenten även till i en annan databastabell för att kunna bli tilldelad en värdroll.
%%%%%%%%%%%%%%%%%%%%%%%VÄRDTILLDELNING
\section{Värdtilldelning}
Värdtilldelningen representerar en databastabell (se Figur~\ref{fig:assignment}) som lagrar alla studenter som har ansökt om att bli värdar för en mässa. Varje ansökan som läggs till defineras med startvärdena: status \textit{Väntande} och värdtyp \textit{Ej tilldelad}. 
\begin{figure}[htb]
\centering
\includegraphics[scale=0.75]{fig/implementation/database/assignment.png}
\caption{\textit{Tabell i databasen över alla tilldelningar}}
\label{fig:assignment}
\end{figure}\\
De förutbestämda värdena för status är: \textit{Väntande}, \textit{Antagen}, \textit{Ej Antagen} samt \textit{Svartlistad}. De olika värdtyperna är: \textit{Företagsvärd}, \textit{Områdesvärd} och \textit{Övrigt}. \\\\ View-filen representerar databastabellen grafiskt (se Figur~\ref{fig:form}) genom att visa studentens namn, nuvarande status och värdtyp för varje inskickad ansökan. \\\\ 
En tilldelning sker genom att CHARMk markerar en användare, väljer en ny status och eventuell värdtyp, samt klickar på knappen Tilldela. 
\begin{figure}[htb]
\centering
\includegraphics[scale=0.55]{fig/implementation/system/vardtilldelning.png}
\caption{\textit{Värdtilldelningen som CHARMk ser}}
\label{fig:form}
\end{figure}
